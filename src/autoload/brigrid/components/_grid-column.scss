@charset "UTF-8";

@import "grid-column/grid-column-base";
@import "grid-column/grid-column-width";
@import "grid-column/grid-column-align";
@import "grid-column/grid-column-order";
@import "grid-column/grid-column-clearfix";

/// Creates a grid column based on flexbox
///
/// @name Grid column (flex driver)
///
/// @group components
///
/// @argument {number (unitless) | string ('hide', 'hidden', 'auto', 'flex') | map} $columns
///     The number of columns that the item should occupy.
///     It can be indicated by:
///     1) a number of columns
///     2) a string ('hide' or 'hidden' - that hides an element, 'auto', 'flex')
///     3) or a media map where each of its keys points to a breakpoint,
///     and the value specifies the number of columns that the item should occupy
///         (Example: (sm: flex, md: auto, lg: 6, xl: hidden))
///
/// @argument {string | map} $align-x [null]
///     Specifies the horizontal alignment of the column
///     It can be indicated by:
///     1) a string (null | start | center | end)
///     2) or a media map where each of its keys points to a breakpoint,
///     and the value specifies the horizontal self-alignment of the column
///         (Example: (md: start, lg: center, xl: end))
///
/// @argument {string | map} $align-y [null]
///     Specifies the vertical alignment of the column
///     It can be indicated by:
///     1) a string (null | start | end | center | baseline | stretch | auto)
///     2) or a media map where each of its keys points to a breakpoint,
///     and the value specifies the vertical self-alignment of the column
///         (Example: (md: start, lg: center, xl: end))
///
/// @argument {number (with unit) | map} $gutter [null]
///     Grid gutter width around column.
///     It can be indicated by:
///     1) a grid gutter width around column
///     2) or a media map where each of its keys points to a breakpoint,
///     and the value specifies the grid gutter width around column.
///         (Example: (sm: 10px, lg: 20px, xl: 30px))
///
/// @argument {string | map} $order [null]
///     Specifies the order of the column
///     It can be indicated by:
///     1) a string (null | start | center | end)
///     2) or a media map where each of its keys points to a breakpoint,
///     and the value specifies the order of the column
///         (Example: (md: 0, lg: 1, xl: 2))
///
/// @argument {map} $grid [$default-grid]
///     The grid map settings will be used to create grid column.
///     By default, the global '$default-grid' will be used.
///
/// @example scss
///     $example-grid: prepare-grid((
///         driver: flex,
///         columns: 12,
///         gutter: 50px,
///         breakpoints: (
///             xs: 0,
///             sm: 576px,
///             md: 768px,
///             lg: 992px,
///             xl: 1200px,
///             xx: 1600px
///         )
///     ));
///     .element {
///         @include grid-column(
///             $columns: (
///                 xs: 12,
///                 sm: 6,
///                 lg: 1,
///                 xx:hidden
///             ),
///             $align-x: (
///                 md: start,
///                 lg: center,
///                 xl: end
///             ),
///             $align-y: (
///                 md: start,
///                 lg: center,
///                 xl: end
///             ),
///             $gutter: (
///                 sm: 10px,
///                 lg: 20px,
///                 xl: 30px
///             ),
///             $order: (
///                 sm: -1,
///                 lg: 0,
///                 xl: 1
///             ),
///             $grid: $example-grid
///         );
///     }
///
/// @example css
///     .element {
///         box-sizing: border-box;
///         display: block;
///         max-width: 100%;
///         width: 100%;
///         min-height: 1px;
///         padding-left: 5px;
///         padding-right: 5px;
///         margin-right: auto;
///         margin-left: 0;
///         align-self: flex-start;
///         order: -1;
///     }
///     @media only screen and (min-width: 576px) {
///         .element {
///             display: block;
///             max-width: 50%;
///             width: 50%;
///         }
///     }
///     @media only screen and (min-width: 992px) {
///         .element {
///             display: block;
///             max-width: 8.33333%;
///             width: 8.33333%;
///             padding-left: 10px;
///             padding-right: 10px;
///             margin-left: auto;
///             margin-right: auto;
///             align-self: center;
///             order: 0;
///         }
///     }
///     @media only screen and (min-width: 1200px) {
///         .element {
///             padding-left: 15px;
///             padding-right: 15px;
///             margin-left: auto;
///             margin-right: 0;
///             align-self: flex-end;
///             order: 1;
///         }
///     }
///     @media only screen and (min-width: 1600px) {
///         .element {
///             display: none;
///         }
///     }


@mixin grid-column--flex($columns, $align-x: null, $align-y: null, $gutter: null, $order: null, $grid: $default-grid) {
    @include grid-column-base($gutter: $gutter, $grid: $grid);
    @include grid-column-width($columns: $columns, $grid: $grid);
    @include grid-column-align($align-y: $align-y, $align-x: $align-x, $grid: $grid);
    @include grid-column-order($order: $order, $grid: $grid);
}


/// Creates a grid column based on float
///
/// @name Grid column (float driver)
///
/// @group components
///
/// @argument {number (unitless) | string ('hide', 'hidden', 'auto', 'flex') | map} $columns
///     The number of columns that the item should occupy.
///     It can be indicated by:
///     1) a number of columns
///     2) a string ('hide' or 'hidden' - that hides an element, 'auto', 'flex')
///     3) or a media map where each of its keys points to a breakpoint,
///     and the value specifies the number of columns that the item should occupy
///         (Example: (sm: flex, md: auto, lg: 6, xl: hidden))
///
/// @argument {number (with unit) | map} $gutter [null]
///     Grid gutter width around column.
///     It can be indicated by:
///     1) a grid gutter width around column
///     2) or a media map where each of its keys points to a breakpoint,
///     and the value specifies the grid gutter width around column.
///         (Example: (sm: 10px, lg: 20px, xl: 30px))
///
/// @argument {map} $grid [$default-grid]
///     The grid map settings will be used to create grid column.
///     By default, the global '$default-grid' will be used.
///
/// @example scss
///     $example-grid: prepare-grid((
///         driver: float,
///         columns: 12,
///         gutter: 50px,
///         breakpoints: (
///             xs: 0,
///             sm: 576px,
///             md: 768px,
///             lg: 992px,
///             xl: 1200px,
///             xx: 1600px
///         )
///     ));
///     .element {
///         @include grid-column(
///             $columns: (xs: 12, sm: 6, lg: 1, xx:hidden),
///             $align-x: (
///                 md: start,
///                 lg: center,
///                 xl: end
///             ), // ! will be ignored because alignment is not supported in float driver!
///             $align-y: (
///                 md: start,
///                 lg: center,
///                 xl: end
///             ), // ! will be ignored because alignment is not supported in float driver!
///             $gutter: (
///                 sm: 10px,
///                 lg: 20px,
///                 xl: 30px
///             ),
///             $order: (
///                 sm: -1,
///                 lg: 0,
///                 xl: 1
///             ), // ! will be ignored because order is not supported in float driver!
///             $grid: $example-grid
///         );
///     }
///
/// @example css
///     .element {
///         box-sizing: border-box;
///         display: block;
///         width: 100%;
///         min-height: 1px;
///         padding-left: 5px;
///         padding-right: 5px;
///         float: left;
///     }
///     @media only screen and (min-width: 576px) {
///         .element {
///             display: block;
///             width: 50%;
///         }
///     }
///     @media only screen and (min-width: 992px) {
///         .element {
///             display: block;
///             width: 8.33333%;
///             padding-left: 10px;
///             padding-right: 10px;
///         }
///     }
///     @media only screen and (min-width: 1200px) {
///         .element {
///             padding-left: 15px;
///             padding-right: 15px;
///         }
///     }
///     @media only screen and (min-width: 1600px) {
///         .element {
///             display: none;
///         }
///     }


@mixin grid-column--float($columns, $gutter: null, $grid: $default-grid) {
    @include grid-column-base($gutter: $gutter, $grid: $grid);
    @include grid-column-width($columns: $columns, $grid: $grid);
}


/// Creates a grid column based on the driver specified in the grid map.
///
/// @name Grid column
///
/// @group components
///
/// @argument {number (unitless) | string ('hide', 'hidden', 'auto', 'flex') | map} $columns
///     The number of columns that the item should occupy.
///     It can be indicated by:
///     1) a number of columns
///     2) a string ('hide' or 'hidden' - that hides an element, 'auto', 'flex')
///     3) or a media map where each of its keys points to a breakpoint,
///     and the value specifies the number of columns that the item should occupy
///         (Example: (sm: flex, md: auto, lg: 6, xl: hidden))
///
/// @argument {string | map} $align-x [null]
///     Specifies the horizontal alignment of the column
///     It can be indicated by:
///     1) a string (null | start | center | end)
///     2) or a media map where each of its keys points to a breakpoint,
///     and the value specifies the horizontal self-alignment of the column
///         (Example: (md: start, lg: center, xl: end))
///
/// @argument {string | map} $align-y [null]
///     Specifies the vertical alignment of the column
///     It can be indicated by:
///     1) a string (null | start | end | center | baseline | stretch | auto)
///     2) or a media map where each of its keys points to a breakpoint,
///     and the value specifies the vertical self-alignment of the column
///         (Example: (md: start, lg: center, xl: end))
///
/// @argument {number (with unit) | map} $gutter [null]
///     Grid gutter width around column.
///     It can be indicated by:
///     1) a grid gutter width around column
///     2) or a media map where each of its keys points to a breakpoint,
///     and the value specifies the grid gutter width around column.
///         (Example: (sm: 10px, lg: 20px, xl: 30px))
///
/// @argument {number (unitless) | map} $order [null]
///     Specifies the order of the column
///     It can be indicated by:
///     1) a number (unitless)
///     2) or a media map where each of its keys points to a breakpoint,
///     and the value specifies the order of the column
///         (Example: (md: 0, lg: 1, xl: 2))
///
/// @argument {map} $grid [$default-grid]
///     The grid map settings will be used to create grid column.
///     By default, the global '$default-grid' will be used.

@mixin grid-column($columns, $align-x: null, $align-y: null, $gutter: null, $order: null, $grid: $default-grid) {
    $driver: get-grid-value(driver, $grid);
    @if ($driver == flex) {
        @include grid-column--flex(
            $columns: $columns,
            $align-x: $align-x,
            $align-y: $align-y,
            $gutter: $gutter,
            $order: $order,
            $grid: $grid
        );
    } @else if ($driver == float) {
        @include grid-column--float(
            $columns: $columns,
            $gutter: $gutter,
            $grid: $grid
        );
    } @else {
        @error "[Brigrid]: Incorrect driver value: '#{$driver}'";
    }    
}
