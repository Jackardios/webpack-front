@charset "UTF-8";

// outer-container base
%_outer-container {
    margin: {
        left: auto;
        right: auto;
    };
    box-sizing: border-box;
}

/// Creates an outer-container by centering it in the viewport and setting its max-width.
///
/// @name Outer container
///
/// @group components
///
/// @argument {map} $grid [$default-grid]
///     The grid map settings (breakpoints, outer-container-widths) will be used to create the outer container.
///     By default, the global '$default-grid' will be used.
///
/// @example scss
///     $example-grid: prepare-grid((
///         breakpoints: (
///             xs: 0, // Extra small screen
///             sm: 576px, // Small screen
///             md: 768px, // Medium screen
///             lg: 992px, // Large screen
///             xl: 1200px, // Extra large screen
///             xx: 1600px // Extra extra large screen
///         ),
///         outer-container-widths: (
///             md: 768px, // Medium screen
///             lg: 960px, // Large screen
///             xl: 1170px, // Extra large screen
///             xx: 1400px // Extra extra large screen
///         )
///     ));
///     .element {
///         @include outer-container($grid: $example-grid);
///     }
///
/// @example css
///     .element {
///         margin-left: auto;
///         margin-right: auto;
///         box-sizing: border-box; 
///         max-width: 768px;
///     }
///     @media only screen and (min-width: 992px) {
///         .element {
///             max-width: 960px;
///         }
///     }
///     @media only screen and (min-width: 1200px) {
///         .element {
///             max-width: 1170px;
///         }
///     }
///     @media only screen and (min-width: 1600px) {
///         .element {
///             max-width: 1400px;
///         }
///     }

@mixin outer-container($grid: $default-grid) {
    @extend %_outer-container;

    $outer-container-offsets: map-get($grid, outer-container-offset);

    $gutters: _convert-to-media-map(get-grid-value(gutter, $grid), $grid);
    $min-half-gutter: nth(map-values(_min-breakpoint($gutters)), 1) / 2;
    @if ($outer-container-offsets == null) {
        $outer-container-offsets: $min-half-gutter;
        $grid: set-grid-value(outer-container-offset, $outer-container-offsets, $grid);
    }

    $outer-container-offsets: _convert-to-media-map($outer-container-offsets, $grid);
    $min-container-offset: nth(map-values(_min-breakpoint($outer-container-offsets)), 1);
    @include _for-media-map($outer-container-offsets, $grid) {
        $container-offset: $_for-media-map-value;
        @if ( $container-offset < $min-container-offset ) {
            @error "[Brigrid]: container-offset should be >= #{$min-half-gutter}(half of min gutter) to function correctly!";
        } @else {
            padding: {
                left: $container-offset;
                right: $container-offset;
            };
        }
    }

    $outer-container-widths: get-grid-value(outer-container-widths, $grid);
    $outer-container-widths-type: type-of($outer-container-widths);
    @if ($outer-container-widths-type == number) {
        max-width: $outer-container-widths;
    } @else if ($outer-container-widths-type == map) {
        $outer-container-widths: _convert-to-media-map($outer-container-widths, $grid);
        @include _for-media-map($outer-container-widths, $grid) {
            $container-width: $_for-media-map-value;
            max-width: $container-width;
        }
    } @else {
        @error "[Brigrid]: Wrong type of `$outer-container-widths`. It must be a map or number";
    }
}
