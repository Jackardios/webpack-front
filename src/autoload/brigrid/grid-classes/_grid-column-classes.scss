@mixin grid-column-base-classes($options: $grid-classes-default-options, $grid: $default-grid) {
    $default-options: $grid-classes-default-options;
    $prefix: get-map-value('prefix', $options, $default-options);
    $names-delimiter: get-map-value('names-delimiter', $options, $default-options);

    $default-names: get-map-value('names', $default-options);
    $names: get-map-value('names', $options, $default-options);
    $column-name: get-map-value('column', $names, $default-names);

    $class-name: list-to-string(($prefix, $column-name), $names-delimiter);
    .#{$class-name} {
        @include grid-column-base($grid: $grid);
    }
}

@mixin grid-column-width-classes($options: $grid-classes-default-options, $grid: $default-grid) {
    $default-options: $grid-classes-default-options;
    $driver: get-grid-value('driver', $grid);
    $prefix: get-map-value('prefix', $options, $default-options);
    $names-delimiter: get-map-value('names-delimiter', $options, $default-options);
    $breakpoint-delimiter: get-map-value('breakpoint-delimiter', $options, $default-options);
    $components: get-map-value('components', $options);
    $columns: get-grid-value('columns', $grid);

    $default-names: get-map-value('names', $default-options);
    $names: get-map-value('names', $options, $default-options);
    $column-name: get-map-value('column', $names, $default-names);

    @for $i from 1 through $columns {
        $class-name: list-to-string(($prefix, $column-name, $i), $names-delimiter);
        .#{$class-name} {
            @include grid-column-width(
                $columns: $i,
                $grid: $grid
            );
        }
    }

    @if (index($components, 'column-media') != null) {
        @include grid-media($grid: $grid) {
            @for $i from 1 through $columns {
                $class-name: list-to-string(($prefix, $column-name, $i), $names-delimiter)
                             + $breakpoint-delimiter
                             + $_grid-media-bp-name;
                .#{$class-name} {
                    @include grid-column-width(
                        $columns: $i,
                        $grid: $grid
                    );
                }
            }
        }
    }
    
    // flex classes
    @if (index($components, 'column-flex') != null) {
        $column-flex-name: get-map-value('column-flex', $names, $default-names);
        $class-name: list-to-string(($prefix, $column-flex-name), $names-delimiter);
        .#{$class-name} {
            @include grid-column-width(
                $columns: flex,
                $grid: $grid
            );
        }
    }

    // auto classes
    @if (index($components, 'column-auto') != null) {
        $column-auto-name: get-map-value('column-auto', $names, $default-names);
        $class-name: list-to-string(($prefix, $column-auto-name), $names-delimiter);
        .#{$class-name} {
            @include grid-column-width(
                $columns: auto,
                $grid: $grid
            );
        }
    }
    
    // hidden classes
    @if (index($components, 'hidden') != null) {
        $hidden-class-name: get-map-value('hidden', $names, $default-names);

        .#{$hidden-class-name} {
            display: none !important;

            @if (index($components, 'hidden-media') != null) {
                @include grid-media($grid: $grid) {
                    &#{$breakpoint-delimiter}#{$_grid-media-bp-name} {
                        display: none !important;
                    }
                }

                @each $bp-name, $bp-value in get-grid-value('breakpoints', $grid) {
                    @if ($bp-name != xs) {
                        @include media-breakpoint-before($bp-name) {
                            &#{$breakpoint-delimiter}before-#{$bp-name} {
                                display: none !important;
                            }
                        }
                    }
                }
            }
        }
    }
}

@mixin grid-column-order-classes($options: $grid-classes-default-options, $grid: $default-grid) {
    $default-options: $grid-classes-default-options;
    $prefix: get-map-value('prefix', $options, $default-options);
    $names-delimiter: get-map-value('names-delimiter', $options, $default-options);
    $modifier-delimiter: get-map-value('modifier-delimiter', $options, $default-options);
    $breakpoint-delimiter: get-map-value('breakpoint-delimiter', $options, $default-options);
    $components: get-map-value('components', $options);

    $default-names: get-map-value('names', $default-options);
    $names: get-map-value('names', $options, $default-options);
    $column-name: get-map-value('column', $names, $default-names);
    $order-name: get-map-value('order', $names, $default-names);
    $columns: get-grid-value('columns', $grid);

    $base-name: list-to-string(($prefix, $column-name), $names-delimiter);
    
    @for $i from -1 through $columns {
        $modifier-name: list-to-string(($order-name, $i), $names-delimiter);
        $class-name: list-to-string(($base-name, $modifier-name), $modifier-delimiter);
        .#{$class-name} {
            @include grid-column-order(
                $order: $i,
                $grid: $grid
            );
        }
    }
    @if (index($components, 'column-order-media') != null) {
        @include grid-media($grid: $grid) {
            @for $i from -1 through $columns {
                $modifier-name: list-to-string(($order-name, $i), $names-delimiter);
                $class-name: list-to-string(($base-name, $modifier-name), $modifier-delimiter)
                       + $breakpoint-delimiter
                       + $_grid-media-bp-name;
                .#{$class-name} {
                    @include grid-column-order(
                        $order: $i,
                        $grid: $grid
                    );
                }
            }
        }
    }
}

@mixin grid-column-align-classes($options: $grid-classes-default-options, $grid: $default-grid) {
    $default-options: $grid-classes-default-options;
    $prefix: get-map-value('prefix', $options, $default-options);
    $names-delimiter: get-map-value('names-delimiter', $options, $default-options);
    $modifier-delimiter: get-map-value('modifier-delimiter', $options, $default-options);
    $breakpoint-delimiter: get-map-value('breakpoint-delimiter', $options, $default-options);
    $components: get-map-value('components', $options);

    $default-names: get-map-value('names', $default-options);
    $names: get-map-value('names', $options, $default-options);
    $column-name: get-map-value('column', $names, $default-names);
    $columns: get-grid-value('columns', $grid);

    $base-name: list-to-string(($prefix, $column-name), $names-delimiter);

    $h-align-prefix: get-map-value('horizontal-alignment', $names, $default-names);
    $h-alignments: map-merge(
        get-map-value('horizontal-alignments', $default-names),
        get-map-value('horizontal-alignments', $names, $default-names)
    );

    // remove unnecessary alignments
    $h-alignments: map-remove($h-alignments, space-around, space-between);

    @each $h-align, $h-align-name in $h-alignments {
        $modifier-name: list-to-string(($h-align-prefix, $h-align-name), $names-delimiter);
        $class-name: list-to-string(($base-name, $modifier-name), $modifier-delimiter);
        .#{$class-name} {
            @include grid-column-align(
                $align-x: $h-align,
                $grid: $grid
            );
        }
    }

    $v-align-prefix: get-map-value('vertical-alignment', $names, $default-names);
    $v-alignments: map-merge(
        get-map-value('vertical-alignments', $default-names),
        get-map-value('vertical-alignments', $names, $default-names)
    );

    @each $v-align, $v-align-name in $v-alignments {
        $modifier-name: list-to-string(($v-align-prefix, $v-align-name), $names-delimiter);
        $class-name: list-to-string(($base-name, $modifier-name), $modifier-delimiter);
        .#{$class-name} {
            @include grid-column-align(
                $align-y: $v-align,
                $grid: $grid
            );
        }
    }

    @if (index($components, 'container-alignment-media') != null) {
        @include grid-media($grid: $grid) {
            @each $h-align, $h-align-name in $h-alignments {
                $modifier-name: list-to-string(($h-align-prefix, $h-align-name), $names-delimiter);
                $class-name: list-to-string(($base-name, $modifier-name), $modifier-delimiter)
                            + $breakpoint-delimiter
                            + $_grid-media-bp-name;
                            
                .#{$class-name} {
                    @include grid-column-align(
                        $align-x: $h-align,
                        $grid: $grid
                    );
                }
            }

            @each $v-align, $v-align-name in $v-alignments {
                $modifier-name: list-to-string(($v-align-prefix, $v-align-name), $names-delimiter);
                $class-name: list-to-string(($base-name, $modifier-name), $modifier-delimiter)
                            + $breakpoint-delimiter
                            + $_grid-media-bp-name;

                .#{$class-name} {
                    @include grid-column-align(
                        $align-y: $v-align,
                        $grid: $grid
                    );
                }
            }
        }
    }
}


@mixin grid-column-classes($options: $grid-classes-default-options, $grid: $default-grid) {
    $components: get-map-value('components', $options);

    @include grid-column-base-classes(
        $options: $options,
        $grid: $grid
    );

    @include grid-column-width-classes(
        $options: $options,
        $grid: $grid
    );

    $driver: get-grid-value('driver', $grid);

    @if ($driver == flex) {
        @if (index($components, 'column-alignment') != null) {
            @include grid-column-align-classes(
                $options: $options,
                $grid: $grid
            );
        }
        @if (index($components, 'column-order') != null) {
            @include grid-column-order-classes(
                $options: $options,
                $grid: $grid
            );
        }
    }
}