// Convert list of col numbers to media map
@function list-to-media-map($list) {
    $breakpoints: map-keys($grid-breakpoints);
    $list-length: length($list);
    $breakpoints-length: length($breakpoints);

    @if ($list-length > $breakpoints-length) {
        @warn "The number of elements in the $size list is greater than $breakpoints, the remaining elements will be ignored";
    }

    $media-map: ();
    @for $i from 1 through min($list-length, $breakpoints-length) {
        $breakpoint: nth($breakpoints, $i * -1);
        $size: nth($list, $i);

        $media-map: map-merge($media-map, ($breakpoint: $size));
    }
    @return $media-map;
}

// col-media
@mixin col-media($size: none, $grid: none) {
    @if $size == none {
        @error "No $size argument passed";
    }

    @if $grid == none {
        @error "No $grid argument passed";
    }
    $grid-driver: map-get($grid, driver);
    $size-type: type-of($size);
    @if ($size-type == "number") {
        $col-width: col-width($size, $grid);
        width: $col-width;
        @if ($grid-driver == flex) {
            max-width: $col-width;
        }
    } @else {
        @if ($size-type == "list") {
            $size: list-to-media-map($size);
        }

        $min-size: min-size($size);
        @each $name, $value in $size {
            @if (($value != none) and ($value != null)) {
                @if ($name == $min-size) {
                    $col-width: col-width($value, $grid);
                    width: $col-width;
                    @if ($grid-driver == flex) {
                        max-width: $col-width;
                    }
                } @else {
                    @include for-size-smaller-than($name) {
                        @include col-change($size: $value, $grid: $grid);
                    }
                }
            }
        }
    }
}

// flexbox based row item
@mixin col-flex($size: 1, $align-y: none, $grid: $default-grid) {
    box-sizing: border-box;
    min-height: 1px;

    $grid-half-gutter: get-grid-value(gutter, $grid) / 2;
    margin-left: $grid-half-gutter;
    margin-right: $grid-half-gutter;

    @include col-media($size: $size, $grid: $grid);

    @if $align-y != none {
        @if $align-y == top {
            align-self: flex-start;
        } @else if $align-y == bottom {
            align-self: flex-end;
        } @else if $align-y == middle {
            align-self: center;
        } @else {
            align-self: $align-y;
        }
    }
}

@mixin col-flex-change($size, $align-y: none, $grid: $default-grid) {
    @if type-of($size) != "number" {
        @error "The argument $size must be a number";
    }

    width: col-width($size, $grid);
    max-width: col-width($size, $grid);

    $grid-half-gutter: get-grid-value(gutter, $grid) / 2;
    margin-left: $grid-half-gutter;
    margin-right: $grid-half-gutter;

    @if $align-y != none {
        @if $align-y == top {
            align-self: flex-start;
        } @else if $align-y == bottom {
            align-self: flex-end;
        } @else if $align-y == middle {
            align-self: center;
        } @else {
            align-self: $align-y;
        }
    }
}

// float based row item
@mixin col-float($size: 1, $grid: $default-grid) {
    $reversed: get-grid-value(reversed, $grid);

    @if ($reversed) {
        float: right;
    } @else {
        float: left;
    }

    box-sizing: border-box;
    min-height: 1px;

    $grid-half-gutter: get-grid-value(gutter, $grid) / 2;
    margin-left: $grid-half-gutter;
    margin-right: $grid-half-gutter;

    @include col-media($size: $size, $grid: $grid);

}

@mixin col-float-change($size: 1, $grid: $default-grid) {
    @if type-of($size) != "number" {
        @error "The argument $size must be a number";
    }

    $grid-half-gutter: get-grid-value(gutter, $grid) / 2;
    margin-left: $grid-half-gutter;
    margin-right: $grid-half-gutter;

    width: col-width($size, $grid);
}

// common mixin col()
@mixin col($size: 1, $align-y: none, $grid: $default-grid) {

    $driver: get-grid-value(driver, $grid);
    @if $driver == flex {
        @include col-flex($size: $size, $align-y: $align-y, $grid: $grid);
    } @if $driver == float {
        @include col-float($size: $size, $grid: $grid);
    }

}

// common mixin col-change()
@mixin col-change($size: 1, $align-y: none, $grid: $default-grid) {

    $driver: get-grid-value(driver, $grid);
    @if $driver == flex {
        @include col-flex-change($size: $size, $align-y: $align-y, $grid: $grid);
    } @if $driver == float {
        @include col-float-change($size: $size, $grid: $grid);
    }

}
